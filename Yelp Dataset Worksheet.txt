Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = id: 10000
ii. Hours = business_id: 1562
iii. Category = business_id: 2643
iv. Attribute = business_id: 1115
v. Review = id: 10000, business_id: 8090, user_id: 9581
vi. Checkin = business_id: 493
vii. Photo = id: 10000, business_id: 6493
viii. Tip = user_id: 537, business_id: 3979
ix. User = id: 10000
x. Friend = user_id: 11
xi. Elite_years = user_id: 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer: 
		select count(*)
		from user
		where id IS NULL OR 
		name IS NULL OR 
		review_count IS NULL OR 
		yelping_since IS NULL OR
		useful IS NULL OR 
		funny IS NULL OR 
		cool IS NULL OR 
		fans IS NULL OR 
		average_stars IS NULL OR 
		compliment_hot IS NULL OR 
		compliment_more IS NULL OR 
		compliment_profile IS NULL OR 
		compliment_cute IS NULL OR 
		compliment_list IS NULL OR 
		compliment_note IS NULL OR 
		compliment_plain IS NULL OR 
		compliment_cool IS NULL OR 
		compliment_funny IS NULL OR 
		compliment_writer IS NULL OR 
		compliment_photos IS NULL;
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	SELECT city,
	SUM(review_count) AS reviews
	FROM business
	GROUP BY city
	ORDER BY reviews DESC;
	
	Copy and Paste the Result Below:
+-----------------+---------+
| city            | reviews |
+-----------------+---------+
| Las Vegas       |   82854 |
| Phoenix         |   34503 |
| Toronto         |   24113 |
| Scottsdale      |   20614 |
| Charlotte       |   12523 |
| Henderson       |   10871 |
| Tempe           |   10504 |
| Pittsburgh      |    9798 |
| Montréal        |    9448 |
| Chandler        |    8112 |
| Mesa            |    6875 |
| Gilbert         |    6380 |
| Cleveland       |    5593 |
| Madison         |    5265 |
| Glendale        |    4406 |
| Mississauga     |    3814 |
| Edinburgh       |    2792 |
| Peoria          |    2624 |
| North Las Vegas |    2438 |
| Markham         |    2352 |
| Champaign       |    2029 |
| Stuttgart       |    1849 |
| Surprise        |    1520 |
| Lakewood        |    1465 |
| Goodyear        |    1155 |
+-----------------+---------+

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
select stars as star_rating,
sum(review_count) as count
from business
where city = 'Avon'
group by star_rating;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |    10 |
|         2.5 |     6 |
|         3.5 |    88 |
|         4.0 |    21 |
|         4.5 |    31 |
|         5.0 |     3 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:
select stars as star_rating,
sum(review_count) as count
from business
where city = 'Beachwood'
group by star_rating;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     8 |
|         2.5 |     3 |
|         3.0 |    11 |
|         3.5 |     6 |
|         4.0 |    69 |
|         4.5 |    17 |
|         5.0 |    23 |
+-------------+-------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	select id, name, review_count
	from user
	order by review_count desc
	limit 3;
		
	Copy and Paste the Result Below:
+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+	


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	Based on my findings, there is a correlation between posting more reviews with more fans. Among the top 15 users with over 100 fans, 5 have posted over 1000 reviews, while among the next 10 users with under 100 fans only 1 has posted over 1000 reviews. Among the top 15 users with over 100 fans, the average amount of reviews was 904.67. As a comparison, the next 10 users with under 100 fans have an average of 480 reviews posted. 

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word "love" than with the word "hate". There are 1780 reviews with the word "love", and 232 reviews with the word "hate".

	
	SQL code used to arrive at answer:
select count(*)
from review
where text like '%love%';

select count(*)
from review
where text like '%hate%';
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	select id, name, fans
	from user
	order by fans desc
	limit 10;
	
	Copy and Paste the Result Below:
+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
The restaurants in Toronto are mostly open from late morning through late night, roughly open from around 11am until 11pm.

ii. Do the two groups you chose to analyze have a different number of reviews?
         The restaurants in Toronto have a different number of reviews, with the 2-3 star restaurants with less number of reviews than the 4-5 star restaurants.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

The restaurants in Toronto have different addresses and the location of the restaurants do not correlate with their respective star ratings.

SQL code used for analysis:

select b.name, h.hours, b.stars, b.review_count, b.address, b.postal_code, 
case 
when hours like '%monday%' then 'Monday'
when hours like '%tuesday%' then'Tuesday'
when hours like '%wednesday%' then 'Wednesday'
when hours like '%thursday%' then 'Thursday'
when hours like '%friday%' then 'Friday'
when hours like '%saturday%' then 'Saturday'
when hours like '%sunday%' then 'Sunday'
end as Days,
case
when b.stars between 2 and 3 then '2-3 stars'
when b.stars between 4 and 5 then '4-5 stars'
end as Star_Rating
from business b
inner join
hours h
on b.id = h.business_id
inner join
category c
on b.id = c.business_id
where (b.city = 'Toronto'
and category like 'Restaurants')
and (b.stars between 2 and 3
or b.stars between 4 and 5)
order by Star_Rating asc;
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: Among the total number of reviews, closed businesses have significantly less amount of reviews than open businesses. Closed businesses have 35,261 reviews, compared with open businesses which have 269,300 reviews.
         
         
ii. Difference 2: The average star rating for closed businesses is 3.52, which is lower compared with the star rating for open businesses which is 3.68.
         
         
         
SQL code used for analysis:

select count(distinct(id)),
avg(review_count),
sum(review_count),
avg(stars),
is_open
from business
group by is_open;
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         I chose to compare the business star ratings with the review star ratings.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
      The type of data I used was from the business and review tables. They included the business name, the review count of the business, the status of the business (open or closed), the star rating of the business, the review star rating, and the averages of the business and review star ratings, respectively. I specifically analyzed the business star ratings and the review star ratings, with a focus on whether or not there is a correlation between the star ratings for each company. Among the 9 businesses in the data, only 3 had the same business and review ratings.
                  
iii. Output of your finished dataset:
+-----------------------------------+----------+-------------+-----+---------+-------+---------------+
| Business_Name                     | RevCount | Open_Closed | BSR | AVG_BSR | RevSR |     AVG_RevSR |
+-----------------------------------+----------+-------------+-----+---------+-------+---------------+
| Rachell Allen Nclex Review        |        8 |           1 | 5.0 |     5.0 |     5 |           5.0 |
| Spinato's Pizza                   |      507 |           1 | 4.5 |     4.5 |     5 | 4.43925233645 |
| QQ Boba                           |      229 |           1 | 4.0 |     4.0 |     2 | 4.08510638298 |
| Autowits Auto Dealership          |        3 |           0 | 3.5 |     3.5 |     1 |  3.4674556213 |
| El Zocalo Mexican Grill           |      251 |           1 | 3.0 |     3.0 |     3 | 3.07462686567 |
| Scott Roofing Company             |       25 |           1 | 2.5 |     2.5 |     1 |  2.5652173913 |
| B&B Theatres Mesa Gateway 12 IMAX |       48 |           0 | 2.0 |     2.0 |     1 |           1.8 |
| Elegant Car Rental                |        6 |           1 | 1.5 |     1.5 |     1 |           1.0 |
| BTR Construction & Roofing        |        6 |           1 | 1.0 |     1.0 |     1 |           1.0 |
+-----------------------------------+----------+-------------+-----+---------+-------+---------------+
         
         
iv. Provide the SQL code you used to create your final dataset:
select b.name, b.review_count, b.is_open, b.stars as b_star_rating, 
avg(b.stars) as average_b_rating,
r.stars as r_star_rating, avg(r.stars) as average_r_rating
from business b
inner join review r
on b.id = r.business_id
group by b_star_rating
order by b_star_rating desc;